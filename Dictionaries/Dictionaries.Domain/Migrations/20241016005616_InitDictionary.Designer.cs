// <auto-generated />
using Dictionaries.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dictionaries.Domain.Migrations
{
    [DbContext(typeof(DictionariesDataContext))]
    [Migration("20241016005616_InitDictionary")]
    partial class InitDictionary
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dictionaries.Domain.Models.Balances.BalanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BalanceTypes", "Dictionaries");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("IconId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories", "Dictionaries");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Countries.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries", "Dictionaries");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Countries.CountryCurrency", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.HasKey("CountryId", "CurrencyId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CountryId", "CurrencyId")
                        .IsUnique();

                    b.ToTable("CountryCurrencies", "Dictionaries");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Currencies.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies", "Dictionaries");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Expenses.Frequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Frequencies", "Dictionaries");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Icons.Icon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IconCategoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IconCategoryId");

                    b.ToTable("Icons", "Dictionaries");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Icons.IconCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IconCategories", "Dictionaries");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Categories.Category", b =>
                {
                    b.HasOne("Dictionaries.Domain.Models.Icons.Icon", "Icon")
                        .WithMany("Categories")
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dictionaries.Domain.Models.Categories.Category", null)
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Countries.CountryCurrency", b =>
                {
                    b.HasOne("Dictionaries.Domain.Models.Countries.Country", "Country")
                        .WithMany("Currencies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dictionaries.Domain.Models.Currencies.Currency", "Currency")
                        .WithMany("Countries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Icons.Icon", b =>
                {
                    b.HasOne("Dictionaries.Domain.Models.Icons.IconCategory", "IconCategory")
                        .WithMany("Icons")
                        .HasForeignKey("IconCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IconCategory");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Categories.Category", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Countries.Country", b =>
                {
                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Currencies.Currency", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Icons.Icon", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Dictionaries.Domain.Models.Icons.IconCategory", b =>
                {
                    b.Navigation("Icons");
                });
#pragma warning restore 612, 618
        }
    }
}
