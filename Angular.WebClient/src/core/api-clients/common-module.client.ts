//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL_CommonModule = new InjectionToken<string>('API_BASE_URL_CommonModule');


export class SiteSettingsResponse implements ISiteSettingsResponse {
    locale!: string;
    version!: CacheVersionResponse;

    constructor(data?: ISiteSettingsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.version = new CacheVersionResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.locale = _data["locale"];
            this.version = _data["version"] ? CacheVersionResponse.fromJS(_data["version"]) : new CacheVersionResponse();
        }
    }

    static fromJS(data: any): SiteSettingsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SiteSettingsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locale"] = this.locale;
        data["version"] = this.version ? this.version.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISiteSettingsResponse {
    locale: string;
    version: CacheVersionResponse;
}

export class CacheVersionResponse implements ICacheVersionResponse {
    localizationPublic!: string;
    localization!: string;
    category!: string;
    currency!: string;
    country!: string;
    locale!: string;
    frequency!: string;

    constructor(data?: ICacheVersionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localizationPublic = _data["localizationPublic"];
            this.localization = _data["localization"];
            this.category = _data["category"];
            this.currency = _data["currency"];
            this.country = _data["country"];
            this.locale = _data["locale"];
            this.frequency = _data["frequency"];
        }
    }

    static fromJS(data: any): CacheVersionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CacheVersionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localizationPublic"] = this.localizationPublic;
        data["localization"] = this.localization;
        data["category"] = this.category;
        data["currency"] = this.currency;
        data["country"] = this.country;
        data["locale"] = this.locale;
        data["frequency"] = this.frequency;
        return data;
    }
}

export interface ICacheVersionResponse {
    localizationPublic: string;
    localization: string;
    category: string;
    currency: string;
    country: string;
    locale: string;
    frequency: string;
}

export class JwtTokenResponse implements IJwtTokenResponse {
    token!: string;

    constructor(data?: IJwtTokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): JwtTokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new JwtTokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

export interface IJwtTokenResponse {
    token: string;
}

export class BaseIdEntityOfGuid implements IBaseIdEntityOfGuid {
    id!: string;

    constructor(data?: IBaseIdEntityOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BaseIdEntityOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new BaseIdEntityOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IBaseIdEntityOfGuid {
    id: string;
}

export class BaseDateTimeEntityOfGuid extends BaseIdEntityOfGuid implements IBaseDateTimeEntityOfGuid {
    created!: Date;
    modified?: Date | undefined;

    constructor(data?: IBaseDateTimeEntityOfGuid) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.modified = _data["modified"] ? new Date(_data["modified"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): BaseDateTimeEntityOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDateTimeEntityOfGuid();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["modified"] = this.modified ? this.modified.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseDateTimeEntityOfGuid extends IBaseIdEntityOfGuid {
    created: Date;
    modified?: Date | undefined;
}

export class UserResponse extends BaseDateTimeEntityOfGuid implements IUserResponse {
    login!: string;
    loginNormalized!: string;
    email!: string;
    emailNormalized!: string;
    passwordHash!: string;
    salt!: string;
    isActive!: boolean;
    isTemporaryPassword!: boolean;
    countryId?: number | undefined;
    currencyId?: number | undefined;
    authType!: UserAuthMethodEnum;
    lastForgotPassword?: Date | undefined;
    lastForgotPasswordRequest?: Date | undefined;
    roles!: RoleResponse[];
    userSetting!: UserSettingResponse;
    version!: string;

    constructor(data?: IUserResponse) {
        super(data);
        if (!data) {
            this.roles = [];
            this.userSetting = new UserSettingResponse();
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.login = _data["login"];
            this.loginNormalized = _data["loginNormalized"];
            this.email = _data["email"];
            this.emailNormalized = _data["emailNormalized"];
            this.passwordHash = _data["passwordHash"];
            this.salt = _data["salt"];
            this.isActive = _data["isActive"];
            this.isTemporaryPassword = _data["isTemporaryPassword"];
            this.countryId = _data["countryId"];
            this.currencyId = _data["currencyId"];
            this.authType = _data["authType"];
            this.lastForgotPassword = _data["lastForgotPassword"] ? new Date(_data["lastForgotPassword"].toString()) : <any>undefined;
            this.lastForgotPasswordRequest = _data["lastForgotPasswordRequest"] ? new Date(_data["lastForgotPasswordRequest"].toString()) : <any>undefined;
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(RoleResponse.fromJS(item));
            }
            this.userSetting = _data["userSetting"] ? UserSettingResponse.fromJS(_data["userSetting"]) : new UserSettingResponse();
            this.version = _data["version"];
        }
    }

    static override fromJS(data: any): UserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["loginNormalized"] = this.loginNormalized;
        data["email"] = this.email;
        data["emailNormalized"] = this.emailNormalized;
        data["passwordHash"] = this.passwordHash;
        data["salt"] = this.salt;
        data["isActive"] = this.isActive;
        data["isTemporaryPassword"] = this.isTemporaryPassword;
        data["countryId"] = this.countryId;
        data["currencyId"] = this.currencyId;
        data["authType"] = this.authType;
        data["lastForgotPassword"] = this.lastForgotPassword ? this.lastForgotPassword.toISOString() : <any>undefined;
        data["lastForgotPasswordRequest"] = this.lastForgotPasswordRequest ? this.lastForgotPasswordRequest.toISOString() : <any>undefined;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["userSetting"] = this.userSetting ? this.userSetting.toJSON() : <any>undefined;
        data["version"] = this.version;
        super.toJSON(data);
        return data;
    }
}

export interface IUserResponse extends IBaseDateTimeEntityOfGuid {
    login: string;
    loginNormalized: string;
    email: string;
    emailNormalized: string;
    passwordHash: string;
    salt: string;
    isActive: boolean;
    isTemporaryPassword: boolean;
    countryId?: number | undefined;
    currencyId?: number | undefined;
    authType: UserAuthMethodEnum;
    lastForgotPassword?: Date | undefined;
    lastForgotPasswordRequest?: Date | undefined;
    roles: RoleResponse[];
    userSetting: UserSettingResponse;
    version: string;
}

export enum UserAuthMethodEnum {
    Base = 1,
    Google = 2,
}

export class BaseIdEntityOfInteger implements IBaseIdEntityOfInteger {
    id!: number;

    constructor(data?: IBaseIdEntityOfInteger) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BaseIdEntityOfInteger {
        data = typeof data === 'object' ? data : {};
        let result = new BaseIdEntityOfInteger();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IBaseIdEntityOfInteger {
    id: number;
}

export class RoleResponse extends BaseIdEntityOfInteger implements IRoleResponse {
    title!: string;
    userRole!: UserRoleEnum;

    constructor(data?: IRoleResponse) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["title"];
            this.userRole = _data["userRole"];
        }
    }

    static override fromJS(data: any): RoleResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RoleResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["userRole"] = this.userRole;
        super.toJSON(data);
        return data;
    }
}

export interface IRoleResponse extends IBaseIdEntityOfInteger {
    title: string;
    userRole: UserRoleEnum;
}

export enum UserRoleEnum {
    User = 1,
    TechnicalSupport = 2,
    Admin = 3,
    SuperAdmin = 4,
}

export class UserSettingResponse extends BaseIdEntityOfGuid implements IUserSettingResponse {
    defaultLocale!: string;
    defaultTimeZone!: number;
    defaultCurrency!: number;
    defaultUserProject!: string;
    userId!: string;
    version!: string;

    constructor(data?: IUserSettingResponse) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.defaultLocale = _data["defaultLocale"];
            this.defaultTimeZone = _data["defaultTimeZone"];
            this.defaultCurrency = _data["defaultCurrency"];
            this.defaultUserProject = _data["defaultUserProject"];
            this.userId = _data["userId"];
            this.version = _data["version"];
        }
    }

    static override fromJS(data: any): UserSettingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserSettingResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultLocale"] = this.defaultLocale;
        data["defaultTimeZone"] = this.defaultTimeZone;
        data["defaultCurrency"] = this.defaultCurrency;
        data["defaultUserProject"] = this.defaultUserProject;
        data["userId"] = this.userId;
        data["version"] = this.version;
        super.toJSON(data);
        return data;
    }
}

export interface IUserSettingResponse extends IBaseIdEntityOfGuid {
    defaultLocale: string;
    defaultTimeZone: number;
    defaultCurrency: number;
    defaultUserProject: string;
    userId: string;
    version: string;
}

