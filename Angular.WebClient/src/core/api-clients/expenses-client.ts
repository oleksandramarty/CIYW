//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL_Expenses = new InjectionToken<string>('API_BASE_URL_Expenses');

@Injectable()
export class ExpenseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL_Expenses) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    userProject_GetAllowedProjects(): Observable<UserAllowedProjectResponse[]> {
        let url_ = this.baseUrl + "/api/v1/localizations/allowed";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUserProject_GetAllowedProjects(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserProject_GetAllowedProjects(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserAllowedProjectResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserAllowedProjectResponse[]>;
        }));
    }

    protected processUserProject_GetAllowedProjects(response: HttpResponseBase): Observable<UserAllowedProjectResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorMessageModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ErrorMessageModel.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ErrorMessageModel.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorMessageModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ErrorMessageModel.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 417) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result417: any = null;
            let resultData417 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result417 = ErrorMessageModel.fromJS(resultData417);
            return throwException("A server side error occurred.", status, _responseText, _headers, result417);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ErrorMessageModel.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserAllowedProjectResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    userProject_GetProjects(): Observable<UserProjectResponse[]> {
        let url_ = this.baseUrl + "/api/v1/localizations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUserProject_GetProjects(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserProject_GetProjects(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserProjectResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserProjectResponse[]>;
        }));
    }

    protected processUserProject_GetProjects(response: HttpResponseBase): Observable<UserProjectResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorMessageModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ErrorMessageModel.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ErrorMessageModel.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorMessageModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ErrorMessageModel.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 417) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result417: any = null;
            let resultData417 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result417 = ErrorMessageModel.fromJS(resultData417);
            return throwException("A server side error occurred.", status, _responseText, _headers, result417);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ErrorMessageModel.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserProjectResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    userProject_AddProject(request: CreateUserProjectCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/localizations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUserProject_AddProject(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserProject_AddProject(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUserProject_AddProject(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorMessageModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ErrorMessageModel.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ErrorMessageModel.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorMessageModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ErrorMessageModel.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 417) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result417: any = null;
            let resultData417 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result417 = ErrorMessageModel.fromJS(resultData417);
            return throwException("A server side error occurred.", status, _responseText, _headers, result417);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ErrorMessageModel.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ErrorMessageModel implements IErrorMessageModel {
    invalidFields!: InvalidFieldInfoModel[];
    message!: string;
    statusCode!: number;

    constructor(data?: IErrorMessageModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.invalidFields = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["invalidFields"])) {
                this.invalidFields = [] as any;
                for (let item of _data["invalidFields"])
                    this.invalidFields!.push(InvalidFieldInfoModel.fromJS(item));
            }
            this.message = _data["message"];
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): ErrorMessageModel {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorMessageModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.invalidFields)) {
            data["invalidFields"] = [];
            for (let item of this.invalidFields)
                data["invalidFields"].push(item.toJSON());
        }
        data["message"] = this.message;
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IErrorMessageModel {
    invalidFields: InvalidFieldInfoModel[];
    message: string;
    statusCode: number;
}

export class InvalidFieldInfoModel implements IInvalidFieldInfoModel {
    propertyName!: string;
    code!: string;
    errorMessage!: string;

    constructor(data?: IInvalidFieldInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"];
            this.code = _data["code"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): InvalidFieldInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidFieldInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName;
        data["code"] = this.code;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IInvalidFieldInfoModel {
    propertyName: string;
    code: string;
    errorMessage: string;
}

export class BaseIdEntityOfGuid implements IBaseIdEntityOfGuid {
    id!: string;

    constructor(data?: IBaseIdEntityOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BaseIdEntityOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new BaseIdEntityOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IBaseIdEntityOfGuid {
    id: string;
}

export class UserAllowedProjectResponse extends BaseIdEntityOfGuid implements IUserAllowedProjectResponse {
    userProjectId!: string;
    userProject!: UserProjectResponse;
    userId!: string;
    isReadOnly!: boolean;

    constructor(data?: IUserAllowedProjectResponse) {
        super(data);
        if (!data) {
            this.userProject = new UserProjectResponse();
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userProjectId = _data["userProjectId"];
            this.userProject = _data["userProject"] ? UserProjectResponse.fromJS(_data["userProject"]) : new UserProjectResponse();
            this.userId = _data["userId"];
            this.isReadOnly = _data["isReadOnly"];
        }
    }

    static override fromJS(data: any): UserAllowedProjectResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserAllowedProjectResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userProjectId"] = this.userProjectId;
        data["userProject"] = this.userProject ? this.userProject.toJSON() : <any>undefined;
        data["userId"] = this.userId;
        data["isReadOnly"] = this.isReadOnly;
        super.toJSON(data);
        return data;
    }
}

export interface IUserAllowedProjectResponse extends IBaseIdEntityOfGuid {
    userProjectId: string;
    userProject: UserProjectResponse;
    userId: string;
    isReadOnly: boolean;
}

export class BaseDateTimeEntityOfGuid extends BaseIdEntityOfGuid implements IBaseDateTimeEntityOfGuid {
    created!: Date;
    modified?: Date | undefined;

    constructor(data?: IBaseDateTimeEntityOfGuid) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.modified = _data["modified"] ? new Date(_data["modified"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): BaseDateTimeEntityOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDateTimeEntityOfGuid();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["modified"] = this.modified ? this.modified.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseDateTimeEntityOfGuid extends IBaseIdEntityOfGuid {
    created: Date;
    modified?: Date | undefined;
}

export class UserProjectResponse extends BaseDateTimeEntityOfGuid implements IUserProjectResponse {
    title!: string;
    isActive!: boolean;
    createdUserId!: string;
    balances!: BalanceResponse[];
    expenses!: ExpenseResponse[];

    constructor(data?: IUserProjectResponse) {
        super(data);
        if (!data) {
            this.balances = [];
            this.expenses = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["title"];
            this.isActive = _data["isActive"];
            this.createdUserId = _data["createdUserId"];
            if (Array.isArray(_data["balances"])) {
                this.balances = [] as any;
                for (let item of _data["balances"])
                    this.balances!.push(BalanceResponse.fromJS(item));
            }
            if (Array.isArray(_data["expenses"])) {
                this.expenses = [] as any;
                for (let item of _data["expenses"])
                    this.expenses!.push(ExpenseResponse.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): UserProjectResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserProjectResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["isActive"] = this.isActive;
        data["createdUserId"] = this.createdUserId;
        if (Array.isArray(this.balances)) {
            data["balances"] = [];
            for (let item of this.balances)
                data["balances"].push(item.toJSON());
        }
        if (Array.isArray(this.expenses)) {
            data["expenses"] = [];
            for (let item of this.expenses)
                data["expenses"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IUserProjectResponse extends IBaseDateTimeEntityOfGuid {
    title: string;
    isActive: boolean;
    createdUserId: string;
    balances: BalanceResponse[];
    expenses: ExpenseResponse[];
}

export class BalanceResponse extends BaseDateTimeEntityOfGuid implements IBalanceResponse {
    userId!: string;
    amount!: number;
    currencyId!: number;
    userProjectId!: string;

    constructor(data?: IBalanceResponse) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
            this.amount = _data["amount"];
            this.currencyId = _data["currencyId"];
            this.userProjectId = _data["userProjectId"];
        }
    }

    static override fromJS(data: any): BalanceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BalanceResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["amount"] = this.amount;
        data["currencyId"] = this.currencyId;
        data["userProjectId"] = this.userProjectId;
        super.toJSON(data);
        return data;
    }
}

export interface IBalanceResponse extends IBaseDateTimeEntityOfGuid {
    userId: string;
    amount: number;
    currencyId: number;
    userProjectId: string;
}

export class ExpenseResponse extends BaseDateTimeEntityOfGuid implements IExpenseResponse {
    title!: string;
    description?: string | undefined;
    amount!: number;
    balanceId?: string | undefined;
    date!: Date;
    userCategoryId?: string | undefined;
    userCategory!: UserCategoryResponse;
    categoryId?: number | undefined;
    userProjectId!: string;
    createdUserId!: string;

    constructor(data?: IExpenseResponse) {
        super(data);
        if (!data) {
            this.userCategory = new UserCategoryResponse();
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
            this.amount = _data["amount"];
            this.balanceId = _data["balanceId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.userCategoryId = _data["userCategoryId"];
            this.userCategory = _data["userCategory"] ? UserCategoryResponse.fromJS(_data["userCategory"]) : new UserCategoryResponse();
            this.categoryId = _data["categoryId"];
            this.userProjectId = _data["userProjectId"];
            this.createdUserId = _data["createdUserId"];
        }
    }

    static override fromJS(data: any): ExpenseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenseResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["amount"] = this.amount;
        data["balanceId"] = this.balanceId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["userCategoryId"] = this.userCategoryId;
        data["userCategory"] = this.userCategory ? this.userCategory.toJSON() : <any>undefined;
        data["categoryId"] = this.categoryId;
        data["userProjectId"] = this.userProjectId;
        data["createdUserId"] = this.createdUserId;
        super.toJSON(data);
        return data;
    }
}

export interface IExpenseResponse extends IBaseDateTimeEntityOfGuid {
    title: string;
    description?: string | undefined;
    amount: number;
    balanceId?: string | undefined;
    date: Date;
    userCategoryId?: string | undefined;
    userCategory: UserCategoryResponse;
    categoryId?: number | undefined;
    userProjectId: string;
    createdUserId: string;
}

export class UserCategoryResponse extends BaseDateTimeEntityOfGuid implements IUserCategoryResponse {
    userId!: string;
    title!: string;
    icon!: string;
    color!: string;

    constructor(data?: IUserCategoryResponse) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"];
            this.title = _data["title"];
            this.icon = _data["icon"];
            this.color = _data["color"];
        }
    }

    static override fromJS(data: any): UserCategoryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserCategoryResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["title"] = this.title;
        data["icon"] = this.icon;
        data["color"] = this.color;
        super.toJSON(data);
        return data;
    }
}

export interface IUserCategoryResponse extends IBaseDateTimeEntityOfGuid {
    userId: string;
    title: string;
    icon: string;
    color: string;
}

export class CreateUserProjectCommand implements ICreateUserProjectCommand {
    title!: string;
    currencyId!: number;

    constructor(data?: ICreateUserProjectCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.currencyId = _data["currencyId"];
        }
    }

    static fromJS(data: any): CreateUserProjectCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserProjectCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["currencyId"] = this.currencyId;
        return data;
    }
}

export interface ICreateUserProjectCommand {
    title: string;
    currencyId: number;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}