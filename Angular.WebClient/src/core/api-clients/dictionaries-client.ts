//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL_Dictionaries = new InjectionToken<string>('API_BASE_URL_Dictionaries');

@Injectable()
export class DictionaryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL_Dictionaries) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    dictionary_GetCountries(request: GetCountriesRequest): Observable<VersionedListOfCountryResponse> {
        let url_ = this.baseUrl + "/api/v1/dictionaries/countries";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDictionary_GetCountries(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDictionary_GetCountries(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VersionedListOfCountryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VersionedListOfCountryResponse>;
        }));
    }

    protected processDictionary_GetCountries(response: HttpResponseBase): Observable<VersionedListOfCountryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorMessageModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ErrorMessageModel.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ErrorMessageModel.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorMessageModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ErrorMessageModel.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 417) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result417: any = null;
            let resultData417 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result417 = ErrorMessageModel.fromJS(resultData417);
            return throwException("A server side error occurred.", status, _responseText, _headers, result417);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ErrorMessageModel.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VersionedListOfCountryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    dictionary_GetCurrencies(request: GetCurrenciesRequest): Observable<VersionedListOfCurrencyResponse> {
        let url_ = this.baseUrl + "/api/v1/dictionaries/currencies";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDictionary_GetCurrencies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDictionary_GetCurrencies(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VersionedListOfCurrencyResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VersionedListOfCurrencyResponse>;
        }));
    }

    protected processDictionary_GetCurrencies(response: HttpResponseBase): Observable<VersionedListOfCurrencyResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorMessageModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ErrorMessageModel.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ErrorMessageModel.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorMessageModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ErrorMessageModel.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 417) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result417: any = null;
            let resultData417 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result417 = ErrorMessageModel.fromJS(resultData417);
            return throwException("A server side error occurred.", status, _responseText, _headers, result417);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ErrorMessageModel.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VersionedListOfCurrencyResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    dictionary_GetCategories(request: GetCategoriesRequest): Observable<VersionedListOfTreeNodeResponseOfCategoryResponse> {
        let url_ = this.baseUrl + "/api/v1/dictionaries/categories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDictionary_GetCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDictionary_GetCategories(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VersionedListOfTreeNodeResponseOfCategoryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VersionedListOfTreeNodeResponseOfCategoryResponse>;
        }));
    }

    protected processDictionary_GetCategories(response: HttpResponseBase): Observable<VersionedListOfTreeNodeResponseOfCategoryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorMessageModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ErrorMessageModel.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ErrorMessageModel.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorMessageModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ErrorMessageModel.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 417) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result417: any = null;
            let resultData417 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result417 = ErrorMessageModel.fromJS(resultData417);
            return throwException("A server side error occurred.", status, _responseText, _headers, result417);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ErrorMessageModel.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VersionedListOfTreeNodeResponseOfCategoryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    siteSetting_GetSettings(): Observable<SiteSettingsResponse> {
        let url_ = this.baseUrl + "/api/v1/site-settings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSiteSetting_GetSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSiteSetting_GetSettings(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SiteSettingsResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SiteSettingsResponse>;
        }));
    }

    protected processSiteSetting_GetSettings(response: HttpResponseBase): Observable<SiteSettingsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorMessageModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ErrorMessageModel.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ErrorMessageModel.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorMessageModel.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ErrorMessageModel.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status === 417) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result417: any = null;
            let resultData417 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result417 = ErrorMessageModel.fromJS(resultData417);
            return throwException("A server side error occurred.", status, _responseText, _headers, result417);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ErrorMessageModel.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SiteSettingsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ErrorMessageModel implements IErrorMessageModel {
    invalidFields!: InvalidFieldInfoModel[];
    message!: string;
    statusCode!: number;

    constructor(data?: IErrorMessageModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.invalidFields = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["invalidFields"])) {
                this.invalidFields = [] as any;
                for (let item of _data["invalidFields"])
                    this.invalidFields!.push(InvalidFieldInfoModel.fromJS(item));
            }
            this.message = _data["message"];
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): ErrorMessageModel {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorMessageModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.invalidFields)) {
            data["invalidFields"] = [];
            for (let item of this.invalidFields)
                data["invalidFields"].push(item.toJSON());
        }
        data["message"] = this.message;
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IErrorMessageModel {
    invalidFields: InvalidFieldInfoModel[];
    message: string;
    statusCode: number;
}

export class InvalidFieldInfoModel implements IInvalidFieldInfoModel {
    propertyName!: string;
    code!: string;
    errorMessage!: string;

    constructor(data?: IInvalidFieldInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"];
            this.code = _data["code"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): InvalidFieldInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidFieldInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName;
        data["code"] = this.code;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IInvalidFieldInfoModel {
    propertyName: string;
    code: string;
    errorMessage: string;
}

export class BaseVersionEntity implements IBaseVersionEntity {
    version?: string | undefined;

    constructor(data?: IBaseVersionEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): BaseVersionEntity {
        data = typeof data === 'object' ? data : {};
        let result = new BaseVersionEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        return data;
    }
}

export interface IBaseVersionEntity {
    version?: string | undefined;
}

export class VersionedListOfCountryResponse extends BaseVersionEntity implements IVersionedListOfCountryResponse {
    items!: CountryResponse[];

    constructor(data?: IVersionedListOfCountryResponse) {
        super(data);
        if (!data) {
            this.items = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CountryResponse.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): VersionedListOfCountryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new VersionedListOfCountryResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IVersionedListOfCountryResponse extends IBaseVersionEntity {
    items: CountryResponse[];
}

export class BaseIdEntityOfInteger implements IBaseIdEntityOfInteger {
    id!: number;

    constructor(data?: IBaseIdEntityOfInteger) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BaseIdEntityOfInteger {
        data = typeof data === 'object' ? data : {};
        let result = new BaseIdEntityOfInteger();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IBaseIdEntityOfInteger {
    id: number;
}

export class CountryResponse extends BaseIdEntityOfInteger implements ICountryResponse {
    title!: string;
    code!: string;
    titleEn!: string;
    isActive!: boolean;
    currencies!: CurrencyResponse[];

    constructor(data?: ICountryResponse) {
        super(data);
        if (!data) {
            this.currencies = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["title"];
            this.code = _data["code"];
            this.titleEn = _data["titleEn"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["currencies"])) {
                this.currencies = [] as any;
                for (let item of _data["currencies"])
                    this.currencies!.push(CurrencyResponse.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): CountryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CountryResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["code"] = this.code;
        data["titleEn"] = this.titleEn;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.currencies)) {
            data["currencies"] = [];
            for (let item of this.currencies)
                data["currencies"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ICountryResponse extends IBaseIdEntityOfInteger {
    title: string;
    code: string;
    titleEn: string;
    isActive: boolean;
    currencies: CurrencyResponse[];
}

export class CurrencyResponse extends BaseIdEntityOfInteger implements ICurrencyResponse {
    title!: string;
    code!: string;
    symbol!: string;
    titleEn!: string;
    isActive!: boolean;
    countries!: CountryResponse[];

    constructor(data?: ICurrencyResponse) {
        super(data);
        if (!data) {
            this.countries = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["title"];
            this.code = _data["code"];
            this.symbol = _data["symbol"];
            this.titleEn = _data["titleEn"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["countries"])) {
                this.countries = [] as any;
                for (let item of _data["countries"])
                    this.countries!.push(CountryResponse.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): CurrencyResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["code"] = this.code;
        data["symbol"] = this.symbol;
        data["titleEn"] = this.titleEn;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.countries)) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ICurrencyResponse extends IBaseIdEntityOfInteger {
    title: string;
    code: string;
    symbol: string;
    titleEn: string;
    isActive: boolean;
    countries: CountryResponse[];
}

export class GetCountriesRequest extends BaseVersionEntity implements IGetCountriesRequest {

    constructor(data?: IGetCountriesRequest) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetCountriesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetCountriesRequest();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetCountriesRequest extends IBaseVersionEntity {
}

export class VersionedListOfCurrencyResponse extends BaseVersionEntity implements IVersionedListOfCurrencyResponse {
    items!: CurrencyResponse[];

    constructor(data?: IVersionedListOfCurrencyResponse) {
        super(data);
        if (!data) {
            this.items = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CurrencyResponse.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): VersionedListOfCurrencyResponse {
        data = typeof data === 'object' ? data : {};
        let result = new VersionedListOfCurrencyResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IVersionedListOfCurrencyResponse extends IBaseVersionEntity {
    items: CurrencyResponse[];
}

export class GetCurrenciesRequest extends BaseVersionEntity implements IGetCurrenciesRequest {

    constructor(data?: IGetCurrenciesRequest) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetCurrenciesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrenciesRequest();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetCurrenciesRequest extends IBaseVersionEntity {
}

export class VersionedListOfTreeNodeResponseOfCategoryResponse extends BaseVersionEntity implements IVersionedListOfTreeNodeResponseOfCategoryResponse {
    items!: TreeNodeResponseOfCategoryResponse[];

    constructor(data?: IVersionedListOfTreeNodeResponseOfCategoryResponse) {
        super(data);
        if (!data) {
            this.items = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TreeNodeResponseOfCategoryResponse.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): VersionedListOfTreeNodeResponseOfCategoryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new VersionedListOfTreeNodeResponseOfCategoryResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IVersionedListOfTreeNodeResponseOfCategoryResponse extends IBaseVersionEntity {
    items: TreeNodeResponseOfCategoryResponse[];
}

export class TreeNodeResponseOfCategoryResponse implements ITreeNodeResponseOfCategoryResponse {
    node?: CategoryResponse | undefined;
    parent?: CategoryResponse | undefined;

    constructor(data?: ITreeNodeResponseOfCategoryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.node = _data["node"] ? CategoryResponse.fromJS(_data["node"]) : <any>undefined;
            this.parent = _data["parent"] ? CategoryResponse.fromJS(_data["parent"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TreeNodeResponseOfCategoryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TreeNodeResponseOfCategoryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["node"] = this.node ? this.node.toJSON() : <any>undefined;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITreeNodeResponseOfCategoryResponse {
    node?: CategoryResponse | undefined;
    parent?: CategoryResponse | undefined;
}

export class CategoryResponse extends BaseIdEntityOfInteger implements ICategoryResponse {
    title!: string;
    icon!: string;
    color!: string;
    isActive!: boolean;
    isPositive!: boolean;
    parentId?: number | undefined;
    children!: TreeNodeResponseOfCategoryResponse[];

    constructor(data?: ICategoryResponse) {
        super(data);
        if (!data) {
            this.children = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["title"];
            this.icon = _data["icon"];
            this.color = _data["color"];
            this.isActive = _data["isActive"];
            this.isPositive = _data["isPositive"];
            this.parentId = _data["parentId"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(TreeNodeResponseOfCategoryResponse.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): CategoryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["icon"] = this.icon;
        data["color"] = this.color;
        data["isActive"] = this.isActive;
        data["isPositive"] = this.isPositive;
        data["parentId"] = this.parentId;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ICategoryResponse extends IBaseIdEntityOfInteger {
    title: string;
    icon: string;
    color: string;
    isActive: boolean;
    isPositive: boolean;
    parentId?: number | undefined;
    children: TreeNodeResponseOfCategoryResponse[];
}

export class GetCategoriesRequest extends BaseVersionEntity implements IGetCategoriesRequest {

    constructor(data?: IGetCategoriesRequest) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetCategoriesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetCategoriesRequest();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetCategoriesRequest extends IBaseVersionEntity {
}

export class SiteSettingsResponse implements ISiteSettingsResponse {
    locale!: string;
    version!: CacheVersionResponse;

    constructor(data?: ISiteSettingsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.version = new CacheVersionResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.locale = _data["locale"];
            this.version = _data["version"] ? CacheVersionResponse.fromJS(_data["version"]) : new CacheVersionResponse();
        }
    }

    static fromJS(data: any): SiteSettingsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SiteSettingsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["locale"] = this.locale;
        data["version"] = this.version ? this.version.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISiteSettingsResponse {
    locale: string;
    version: CacheVersionResponse;
}

export class CacheVersionResponse implements ICacheVersionResponse {
    localizationPublic!: string;
    localization!: string;
    category!: string;
    currency!: string;
    country!: string;
    locale!: string;

    constructor(data?: ICacheVersionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localizationPublic = _data["localizationPublic"];
            this.localization = _data["localization"];
            this.category = _data["category"];
            this.currency = _data["currency"];
            this.country = _data["country"];
            this.locale = _data["locale"];
        }
    }

    static fromJS(data: any): CacheVersionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CacheVersionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localizationPublic"] = this.localizationPublic;
        data["localization"] = this.localization;
        data["category"] = this.category;
        data["currency"] = this.currency;
        data["country"] = this.country;
        data["locale"] = this.locale;
        return data;
    }
}

export interface ICacheVersionResponse {
    localizationPublic: string;
    localization: string;
    category: string;
    currency: string;
    country: string;
    locale: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}